name: Unittests (Fast)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ether/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ether/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/tests.yml'
  workflow_dispatch:

# Optional: enable Codecov PR annotations; keep only contents: read if you don't need them.
permissions:
  contents: read
  # checks: write
  # pull-requests: write

concurrency:
  # Cancel superseded runs on the same ref to save minutes
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # check-has-tests:
  #   # This job is used to check if the tests directory exists and if it contains test files.
  #   runs-on: ubuntu-latest
  #   outputs:
  #     has-tests: ${{ steps.check-has-tests.outputs.exists }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Check if test files exist
  #       id: check-has-tests
  #       shell: bash
  #       run: |
  #         set -euo pipefail
  #         if [ -d "tests" ] && \
  #            find tests -type f \( -name "test_*.py" -o -name "*_test.py" \) -print -quit | grep -q .
  #         then
  #           echo "exists=true" >> "$GITHUB_OUTPUT"
  #           echo "Test files found."
  #         else
  #           echo "exists=false" >> "$GITHUB_OUTPUT"
  #           echo "No test files found; skipping tests."
  #         fi

  test:
    runs-on: ubuntu-latest
    # needs: check-has-tests
    # if: needs.check-has-tests.outputs.has-tests == 'true'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']  # e.g., ['3.11','3.12'] later
        os: [ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
          cache-dependency-path: '**/poetry.lock'

      # - name: Install Poetry
      #   uses: snok/install-poetry@v1
      #   with:
      #     version: 2.1.3
      #     virtualenvs-create: true
      #     virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --with dev --no-interaction --no-ansi

      - name: Run unit tests
        env:
          PYTHONWARNINGS: default
        run: |
          # Optional parallelization: requires pytest-xdist in dev deps
          # export PYTEST_ADDOPTS="-n auto"
          poetry run pytest tests/ \
            -m "not integration and not slow" \
            --cov=ether \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=90 \
            --strict-markers \
            --tb=short

      # - name: Upload HTML coverage (artifact)
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-html
      #     path: htmlcov
      #     if-no-files-found: ignore
      #     retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # not required for public repos
          # files: ./coverage.xml
          # flags: unittests
          # name: unit-tests
          # fail_ci_if_error: true
          # verbose: true
