name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'ether/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/sphinx-docs.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'ether/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/sphinx-docs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Recommended for GitHub Pages so only the latest build is deployed
concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  # Flag to enable/disable documentation workflow
  # Set to 'true' to enable, 'false' to disable
  check-enabled:
    runs-on: ubuntu-latest
    outputs:
      enabled: ${{ steps.check-flag.outputs.enabled }}
    steps:
      - name: Check if documentation workflow is enabled
        id: check-flag
        run: |
          # Set this to 'true' to enable documentation publishing
          # Set this to 'false' to disable documentation publishing
          echo "enabled=false" >> "$GITHUB_OUTPUT"
          echo "Documentation workflow is currently DISABLED"
          echo "To enable, change 'enabled=false' to 'enabled=true' in this step"

  docs-directory:
    runs-on: ubuntu-latest
    needs: check-enabled
    if: needs.check-enabled.outputs.enabled == 'true'
    outputs:
      docs-exists: ${{ steps.check-docs.outputs.exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if docs directory and conf.py exist
        id: check-docs
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "docs" ] && [ -f "docs/conf.py" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "docs directory and conf.py exist"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            if [ ! -d "docs" ]; then
              echo "docs directory does not exist"
            fi
            if [ ! -f "docs/conf.py" ]; then
              echo "docs/conf.py file does not exist"
            fi
            echo "skipping documentation build"
          fi

  build:
    runs-on: ubuntu-latest
    needs: [check-enabled, docs-directory]
    if: needs.check-enabled.outputs.enabled == 'true' && needs.docs-directory.outputs.docs-exists == 'true'
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: poetry
          cache-dependency-path: '**/poetry.lock'

      # - name: Install Poetry
      #   uses: snok/install-poetry@v1
      #   with:
      #     version: 2.1.3
      #     virtualenvs-create: true
      #     virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
            venv-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev,docs --no-interaction --no-ansi

      - name: Generate API documentation
        run: |
          cd docs
          poetry run sphinx-apidoc -o . ../docs/ --force

      - name: Build documentation
        env:
          SPHINXOPTS: "-n -W --keep-going"
        run: |
          cd docs
          poetry run sphinx-build -b html . _build/html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html

      # Optional: store the HTML as a regular artifact for PRs/debugging
      - name: Upload docs as artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: docs/_build/html
          if-no-files-found: ignore
          retention-days: 7

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [check-enabled, docs-directory, build]
    if: github.ref == 'refs/heads/main' && needs.check-enabled.outputs.enabled == 'true' && needs.docs-directory.outputs.docs-exists == 'true'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
